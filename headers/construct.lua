---@class Construct
Construct = {}
Construct.__index = Construct

---Returns the name of the Construct
---@return string name The construct name
function Construct.getName() end

---Returns the construct unique ID
---@return number id The unique ID
function Construct.getId() end

---Returns the owner entity
---@return OwnerEntity owner The owner entity table with fields {[number] id, [boolean] isOrganization} describing the owner.
function Construct.getOwner() end

---Returns the creator entity
---@return OwnerEntity creator The creator entity table with fields {[number] id, [boolean] isOrganization} describing the creator.
function Construct.getCreator() end

---Checks if the construct is currently warping
---@return boolean state True if the construct is currently warping
function Construct.isWarping() end

---Returns the current warp state
---@return number state The current warp state index (Idle = 1, Engage = 2, Align = 3, Spool = 4, Accelerate = 5, Cruise = 6, Decelerate = 7, Stopping = 8, Disengage = 9)
function Construct.getWarpState() end

---Checks if the construct is in PvP zone
---@return boolean status True if the construct is in PvP zone
function Construct.isInPvPZone() end

---Returns the distance between the construct and the nearest safe zone
---@return number distance The distance to the nearest safe zone border in meters. Positive value if the construct is outside of any safe zone.
function Construct.getDistanceToSafeZone() end

---Returns the current construct PvP timer state
---@return number timer The remaining time of the PvP timer, or 0.0 if elapsed.
function Construct.getPvPTimer() end

---Returns the mass of the construct
---@return number mass The mass of the construct in kilograms
function Construct.getMass() end

---Returns the inertial mass of the construct, calculated as 1/3 of the trace of the inertial tensor
---@return number mass The inertial mass of the construct in kilograms * meters square
function Construct.getInertialMass() end

---Returns the inertial tensor of the construct
---@return number tensor The inertial tensor of the construct in kilograms * meters square
function Construct.getInertialTensor() end

---Returns the position of the center of mass of the construct, in local construct coordinates
---@return vec3 position The position of the center of mass of the construct
function Construct.getCenterOfMass() end

---Returns the position of the center of mass of the construct, in world coordinates
---@return vec3 position The position of the center of mass of the construct
function Construct.getWorldCenterOfMass() end

---Returns the construct's cross sectional surface in the current direction of the movement
---@return number surface The construct's surface exposed in the current direction of movement in meters square
function Construct.getCrossSection() end

---Returns the size of the building zone of the construct
---@return vec3 size The building zone size in meters
function Construct.getSize() end

---Returns the size of the bounding box of the construct
---@return vec3 size The bounding box size in meters
function Construct.getBoundingBoxSize() end

---Returns the position of the center of bounding box of the construct in local construct coordinates
---@return vec3 position The position of the center of bounding box of the construct
function Construct.getBoundingBoxCenter() end

---Returns the max speed along current moving direction
---@return number speed The max speed along current moving direction in m/s
function Construct.getMaxSpeed() end

---Returns the max angular speed
---@return number speed The max angular speed in rad/s
function Construct.getMaxAngularSpeed() end

---Returns the max speed per axis
---@return number[] speeds The max speed along axes {x, -x, y, -y, z, -z} in m/s
function Construct.getMaxSpeedPerAxis() end

---Returns the construct max kinematics parameter in both atmo and space range, in newtons.
---Kinematics paramters designate here the maximal positive and negative base force the construct is capable of producing along th chosen  CRefAxis. 
---In practice, this gives you an estimate of the maximum thrust your ship is capable of producing in space or atmosphere, as well as the max reverse thrust.
---@param taglist string Comma (for union) or space (for intersection) separated list of tags.
---@param CRefAxis vec3 Axis along which to compute the max force in construct local coordinates
---@return table thrust The kenematics parameters in newtons in teh order: atmoRange.FMaxPlus, atmoRange.FMaxMinus, spaceRange.FMaxPLus, spaceRange.FMaxMinus
function Construct.getMaxThrustAlongAxis(taglist, CRefAxis) end

---Returns the current braking force generated by construct brakes
---@return number force The current braking force in newtons
function Construct.getCurrentBrake() end

---Return the maximum braking force that can currently be generated by the construct brakes
---@return number force The maximum braking force in newtons
function Construct.getMaxBrake() end

---Return the world position of the construct
---@return vec3 position The xyz world coordinates of the construct center position in meters
function Construct.getWorldPosition() end

---The construct's linear velocity, relative to its parent, in construct local coordinates
---@return vec3 velocity Relative linear velocity vector, in construct local coordinates in m/s
function Construct.getVelocity() end

---The construct's linear velocity, relative to its parent, in world coordinates
---@return vec3 velocity Relative linear velocity, in world coordinates in m/s
function Construct.getWorldVelocity() end

---The construct's absolute linear velocity, in construct local coordinates
---@return vec3 velocity Absolute linear velocity vector, in construct local coordinates in m/s
function Construct.getAbsoluteVelocity() end

---The construct's absolute linear velocity, in world coordinates
---@return vec3 velocity Absolute linear velocity vector, in world coordinates in m/s
function Construct.getWorldAbsoluteVelocity() end

---The construct's linear acceleration, in construct local coordinates
---@return vec3 acceleration Linear acceleration vector, in construct local coordinates in m/s2
function Construct.getAcceleration() end

---The construct's linear acceleration, in world coordinates
---@return vec3 acceleration Linear acceleration vector, in world coordinates in m/s2
function Construct.getWorldAcceleration() end

---The construct's angular velocity, in construct local coordinates
---@return vec3 velocity Angular velocity vector, in construct local coordinates in rad/s
function Construct.getAngularVelocity() end

---The construct's angular velocity, in world coordinates
---@return vec3 velocity Angular velocity vector in world coordinates in rad/s
function Construct.getWorldAngularVelocity() end

---The construct's angular acceleration, in construct local coordinates
---@return vec3 acceleration Angular acceleration vector, in construct local coordinates in rad/s2
function Construct.getAngularAcceleration() end

---The construct's angular acceleration, in world coordinates
---@return vec3 acceleration Angulair acceleration vector, in world coordinates in rad/s2
function Construct.getWorldAngularAcceleration() end

---Returns the acceleration generated by air resistance
---@return vec3 acceleration The xyz world acceleration generated by air resistance
function Construct.getWorldAirFrictionAcceleration() end

---Returns the acceleration torque generated by air resistance
---@return vec3 acceleration The xyz world acceleration torque generated by air resistance
function Construct.getWorldAirFrictionAngularAcceleration() end

---Returns the speed at which your construct will suffer damage due to friction with the air
---@return number speed The construct speed to get damages due to friction in m/s
function Construct.getFrictionBurnSpeed() end

---Returns the forward vector of the construct coordinates system
---@return vec3 vector The forward vector of the construct coordinates system. It's a static value equal to (0,1,0)
function Construct.getForward() end

---Returns the right vector of the construct coordinates system
---@return vec3 vector The right vector of the construct coordinates system. It's a static value equal to (1,0,0)
function Construct.getRight() end

---Returns the up vector of the construct coordinates system
---@return vec3 vector The up vector of the construct coordinates system. It's a static value equal to (0,0,1)
function Construct.getUp() end

---Returns the forward direction vector of the construct, in world coordinates
---@return vec3 vector The forward direction vector of the construct, in world coordinates
function Construct.getWorldForward() end

---Returns the right direction vector of the construct, in world coordinates
---@return vec3 vector The right direction vector of the construct, in world coordinates
function Construct.getWorldRight() end

---Returns the up direction vector of the construct, in world coordinates
---@return vec3 vector The up direction vector of the construct, in world coordinates
function Construct.getWorldUp() end

---Returns the local id of the current active orientation unit
---@return number id The local id of the current active orientation unit (core unit or gyro unit)
function Construct.getOrientationUnitId() end

---Returns the forward direction vector of the active orientation unit, in construct local coordinates
---@return vec3 vector Forward direction vector of the active orientation unit, in construct local coordinates
function Construct.getOrientationForward() end

---Returns the right direction vector of the active orientation unit, in construct local coordinates
---@return vec3 vector Right direction vector of the active orientation unit, in construct local coordinates
function Construct.getOrientationRight() end

---Returns the up direction vector of the active orientation unit, in construct local coordinates
---@return vec3 vector Up direction vector of the active orientation unit, in construct local coordinates
function Construct.getOrientationUp() end

---Returns the forward direction vector of the active orientation unit, in world coordinates
---@return vec3 vector Forward direction vector of the active orientation unit, in world coordinates
function Construct.getWorldOrientationForward() end

---Returns the right direction vector of the active orientation unit, in world coordinates
---@return vec3 vector Right direction vector of the active orientation unit, in world coordinates
function Construct.getWorldOrientationRight() end

---Returns the up direction vector of the active orientation unit, in world coordinates
---@return vec3 vector Up direction vector of the active orientation unit, in world coordinates
function Construct.getWorldOrientationUp() end

---Returns the id of the parent construct of your active construct
---@return number id The parent id
function Construct.getParent() end

---Returns the id of the nearest constructs, on which the construct can dock
---@return number id The id of the nearest construct
function Construct.getClosestParent() end

---Returns the list of ids of nearby constructs, on which the construct can dock
---@return number[] ids List of ids of nearby constructs
function Construct.getCloseParents() end

---Returns the position of the construct's parent when docked in local coordinates
---@return vec3 position The position of the construct's parent in local coordinates
function Construct.getParentPosition() end

---Returns the position of the construct's parent when docked in world coordinates
---@return vec3 position The position of the construct's parent in world coordinates
function Construct.getParentWorldPosition() end

---Returns the construct's parent forward direction vector, in local coordinates
---@return vec3 vector The construct's parent forward direction vector, in local coordinates
function Construct.getParentForward() end

---Returns the construct's parent right direction vector, in local coordinates
---@return vec3 vector The construct's parent right direction vector, in local coordinates
function Construct.getParentRight() end

---Returns the construct's parent up direction vector, in local coordinates
---@return vec3 vector The construct's parent up direction vector, in local coordinates
function Construct.getParentUp() end

---Returns the construct's parent forward direction vector, in world coordinates
---@return vec3 vector The construct's parent forward direction vector, in world coordinates
function Construct.getParentWorldForward() end

---Returns the construct's parent right direction vector, in world coordinates
---@return vec3 vector The construct's parent right direction vector, in world coordinates
function Construct.getParentWorldRight() end

---Returns the construct's parent up direction vector, in world coordinates
---@return vec3 vector The construct's parent up direction vector, in world coordinates
function Construct.getParentWorldUp() end

---Returns the list of player IDs on board the construct
---@return number[] ids The list of player IDs on board
function Construct.getPlayersOnBoard() end

---Returns the list of player ids on board the construct inside a VR station
---@return number[] ids The list of player IDs on board
function Construct.getPlayersOnBoardInVRStation() end

---Check if the given player is on board of the construct
---@param id number The player id
---@return boolean result True if the given player is on board
function Construct.isPlayerBoarded(id) end

---Check if the given player is boarded to the construct inside a VR station
---@param id number The player id
---@return boolean result True if the given player is boarded to the construct
function Construct.isPlayerBoardedInVRStation(id) end

---Returns the mass of the given player if it is on board the construct
---@param id number The player id
---@return number mass The mass of the player
function Construct.getBoardedPlayerMass(id) end

---Returns the mass of the given player if in VR station on board the construct
---@param id number The player id
---@return number mass The mass of the player
function Construct.getBoardedInVRStationAvatarMass(id) end

---Returns the list of IDs of constructs docked to the construct
---@return number[] ids The list of IDs of docked constructs
function Construct.getDockedConstructs() end

---Checks if the given construct is docked to the construct
---@return boolean result True if the given construct is docked
function Construct.isConstructDocked(id) end

---Returns the mass of the given construct if it is docked to the construct
---@param id number The construct id
---@return number mass The mass of the construct
function Construct.getDockedConstructMass(id) end

---Sets the docking mode
---@param mode number The docking mode (Manual = 1, Automatic = 2, Semi-automatic = 3)
---@return boolean result True if the operation is a success
function Construct.setDockingMode(mode) end

---Returns the current docking mode
---@return number mode The docking mode (Manual = 1, Automatic = 2, Semi-automatic = 3)
function Construct.getDockingMode() end

---Sends a request to dock to the given construct.
---Limited to piloting controllers
---@param id number The parent construct id
---@return boolean result True if the operation is a success
function Construct.dock(id) end

---Sends a request to undock the construct.
---Limited to piloting controllers
---@return boolean result True if the operation is a success
function Construct.undock() end

---Sends a request to deboard a player or surrogate with the given id
---@param id number The player id
---@return boolean result True if the operation is a success
function Construct.forceDeboard(id) end

---Sends a request to undock a construct with the given id
---@param id number The construct id
---@return boolean result True if the operation is a success
function Construct.forceUndock(id) end

---Sends a request to interrupt the surrogate session of a player with the given id
---@param id number The player id
---@return boolean result True if the operation is a success
function Construct.forceInterruptVRSession(id) end
